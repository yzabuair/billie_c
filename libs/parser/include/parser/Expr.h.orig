// Copyright 2025, Yasser Zabuair.  See LICENSE for details.
#pragma once
#include <scanner/Token.h>

#include <memory>
#include <string>
#include <variant>

namespace billiec::parser {
using ValueType = std::variant<std::monostate, std::string, int, bool, nullptr_t>;

// Forwards
struct LiteralExpr;

struct ExprVisitor {
    ExprVisitor(){ }
    virtual ~ExprVisitor(){ }
    
    virtual ValueType visit(const LiteralExpr& expr) = 0;
};

struct Expr {
    using PtrType = std::unique_ptr<Expr>;
    Expr(){ }
    virtual ~Expr(){ }

    virtual void accept(ExprVisitor& visitor) = 0;
};

// ---

struct LiteralExpr: public Expr {
    using PtrType = std::unique_ptr<LiteralExpr>;
    scanner::TokenValueType value;
    
    LiteralExpr(const scanner::TokenValueType& value):
        value{value} {
        
    }
    
    static PtrType create(const scanner::TokenValueType& value) {
        return std::make_unique<LiteralExpr>(value);
    }
    
    void accept(ExprVisitor& visitor) override {
        visitor.visit(*this);
    }
};

// ---


} // namespace billiec::parse



