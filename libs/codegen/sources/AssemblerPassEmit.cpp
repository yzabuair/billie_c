#include <codegen/AssemblerPassEmit.h>


namespace billiec::codegen {

void AssemblerPassEmit::process() {
    for(auto& curr: instructions) {
        process_node_(curr);
    }
}

void AssemblerPassEmit::process_node_(AssemblerNode::PtrType& curr_node) {
    if(auto node = dynamic_cast<ProgramAssemblerNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<CompoundAssemblerNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<FunctionAssemblerNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<MovInstructionNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<ReturnInstructionNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<LiteralInstructionNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<RegisterInstructionNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<UnaryInstructionNode*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<AllocateStack*>(curr_node.get())) {
        visit_node_(*node);
    } else if (auto node = dynamic_cast<PseudoRegister*>(curr_node.get())) {
        visit_node_(*node);
    } else {
        // TODO: Error, hey what happen.
    }
}

void AssemblerPassEmit::visit_node_(CompoundAssemblerNode& node) {
    for(auto& curr_node: node.instructions) {
        process_node_(curr_node);
    }
}

void AssemblerPassEmit::visit_node_(ProgramAssemblerNode& node) {
    ostream << "; Generated by billie-c\n";
}

void AssemblerPassEmit::visit_node_(FunctionAssemblerNode& node) {
    ostream << ".global _" << node.name << "\n";
    ostream << "_" << node.name << ": \n";
    for(auto& curr: node.instructions) {
        //curr->assembler_pass(*this);
    }
}

void AssemblerPassEmit::visit_node_(MovInstructionNode& node) {
    ostream << "MOV ";
    process_node_(node.src);
    ostream << ", ";
    process_node_(node.dst);
    ostream << "\n";
}

void AssemblerPassEmit::visit_node_(ReturnInstructionNode& node) {
    
}

void AssemblerPassEmit::visit_node_(LiteralInstructionNode& node) {
    
}

void AssemblerPassEmit::visit_node_(RegisterInstructionNode& node) {
    
}

void AssemblerPassEmit::visit_node_(UnaryInstructionNode& node) {
    
}

void AssemblerPassEmit::visit_node_(AllocateStack& node) {
    
}

void AssemblerPassEmit::visit_node_(PseudoRegister& node) {
    
}

} // namespace billiec::codegen
